@page "/registration"
@using MySql.Data.MySqlClient
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using BlazorApp1.Data
@code {
    private bool isRegistering = false;
    private string debug = "";
    private string login;
    private string password;

    private string regUsername;
    private string regEmail;
    private string regPassword;

    private void StartRegistration()
    {
        isRegistering = true;
    }

    private async Task SubmitLogin()
    {
        if (string.IsNullOrWhiteSpace(login) || string.IsNullOrWhiteSpace(password))
            return;

        try
        {
            string connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
            using var conn = new MySqlConnection(connStr);
            await conn.OpenAsync();

            var hash = HashPassword(password);

            var cmd = new MySqlCommand("SELECT id, email, password_hash, coins FROM users WHERE username = @login", conn);
            cmd.Parameters.AddWithValue("@login", login);
            using var reader = await cmd.ExecuteReaderAsync();

            if (await reader.ReadAsync())
            {
                var storedHash = reader.GetString(2);
                if (storedHash != hash)
                {
                    debug = "❌ Неверный пароль";
                    return;
                }

                var userId = reader.GetInt32(0);
                var email = reader.GetString(1);
                var coins = reader.GetInt32(3);

                // создать токен
                // Удаление предыдущих токенов пользователя
                reader.Close(); // обязательно закрыть перед новым запросом
                var deleteCmd = new MySqlCommand("DELETE FROM authtokens WHERE user_id = @uid", conn);
                deleteCmd.Parameters.AddWithValue("@uid", userId);
                await deleteCmd.ExecuteNonQueryAsync();
                var token = Guid.NewGuid().ToString();
                var expires = DateTime.UtcNow.AddDays(7);

                var insertCmd = new MySqlCommand("INSERT INTO authtokens (user_id, token, expires_at) VALUES (@uid, @token, @exp)", conn);
                insertCmd.Parameters.AddWithValue("@uid", userId);
                insertCmd.Parameters.AddWithValue("@token", token);
                insertCmd.Parameters.AddWithValue("@exp", expires);
                await insertCmd.ExecuteNonQueryAsync();

                await JS.InvokeVoidAsync("localStorage.setItem", "auth_token", token);
                UserSession.CurrentUser = await UserRepository.LoadUserById(userId, conn);


                Navigation.NavigateTo("/main");
            }
            else
            {
                debug = "❌ Пользователь не найден";
            }
        }
        catch (Exception ex)
        {
            debug = $"❌ Ошибка: {ex.Message}";
        }
    }

    private static string HashPassword(string password)
    {
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        var bytes = System.Text.Encoding.UTF8.GetBytes(password);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }
    private async Task SubmitRegistration()
    {
        if (string.IsNullOrWhiteSpace(regUsername) || string.IsNullOrWhiteSpace(regPassword))
            return;

        try
        {
            string connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
            using var conn = new MySqlConnection(connStr);
            await conn.OpenAsync();

            // Проверка существующего имени
            string checkQuery = "SELECT COUNT(*) FROM users WHERE username = @username";
            using var checkCmd = new MySqlCommand(checkQuery, conn);
            checkCmd.Parameters.AddWithValue("@username", regUsername);
            var exists = Convert.ToInt32(await checkCmd.ExecuteScalarAsync()) > 0;
            if (exists)
            {
                debug = "❗ Такой пользователь уже существует";
                return;
            }

            // Хэширование пароля
            var passwordHash = HashPassword(regPassword);

            // Вставка пользователя
            string insertUserQuery = "INSERT INTO users (username, email, password_hash) VALUES (@username, @email, @password)";
            using var insertCmd = new MySqlCommand(insertUserQuery, conn);
            insertCmd.Parameters.AddWithValue("@username", regUsername);
            insertCmd.Parameters.AddWithValue("@email", regEmail);
            insertCmd.Parameters.AddWithValue("@password", passwordHash);
            await insertCmd.ExecuteNonQueryAsync();

            // Получаем ID нового пользователя
            var userIdCmd = new MySqlCommand("SELECT LAST_INSERT_ID();", conn);
            var userId = Convert.ToInt32(await userIdCmd.ExecuteScalarAsync());

            // Создаём 3 фикуса и записываем в БД + в UserSession
            var flowers = new List<Flower>();

            var typesQuery = "SELECT id, name, code, price_buy, price_sell FROM flowertypes WHERE id = 8";
            using var typeCmd = new MySqlCommand(typesQuery, conn);
            using var typeReader = await typeCmd.ExecuteReaderAsync();

            if (await typeReader.ReadAsync())
            {
                int typeId = typeReader.GetInt32(0);
                string displayName = typeReader.GetString(1);
                string codeName = typeReader.GetString(2);
                int priceBuy = typeReader.GetInt32(3);      // ← добавлено
                int priceSell = typeReader.GetInt32(4);     // ← добавлено

                await typeReader.CloseAsync(); // ← await обязательно

                for (int i = 0; i < 3; i++)
                {
                    // Добавление в БД
                    var flowerInsert = new MySqlCommand(
                        "INSERT INTO flowers (user_id, type_id, hp, pot_slot) VALUES (@uid, @type, @hp, @slot)", conn);
                    flowerInsert.Parameters.AddWithValue("@uid", userId);
                    flowerInsert.Parameters.AddWithValue("@type", typeId);
                    flowerInsert.Parameters.AddWithValue("@hp", 15);
                    flowerInsert.Parameters.AddWithValue("@slot", i);
                    await flowerInsert.ExecuteNonQueryAsync();

                    // Добавление в список в C#
                    flowers.Add(new Flower
                        {
                            TypeId = typeId,
                            DisplayName = displayName,
                            CodeName = codeName,
                            Hp = 15,
                            MaxHp = 15,
                            Slot = i,
                            PriceBuy = priceBuy,     // ← добавлено
                            PriceSell = priceSell    // ← добавлено
                        });
                }
            }
            UserSession.CurrentUser = new User
                {
                    Id = userId,
                    Username = regUsername,
                    Email = regEmail,
                    PasswordHash = passwordHash,
                    Coins = 0,
                    Flowers = flowers
                };


            // ❗ Удаляем старые токены на всякий случай (если регаешься повторно под тем же user_id)
            var deleteCmd = new MySqlCommand("DELETE FROM authtokens WHERE user_id = @uid", conn);
            deleteCmd.Parameters.AddWithValue("@uid", userId);
            await deleteCmd.ExecuteNonQueryAsync();
            // Генерация токена
            var token = Guid.NewGuid().ToString();
            var expires = DateTime.UtcNow.AddDays(7); // 7 дней

            // Вставка токена
            var insertTokenCmd = new MySqlCommand("INSERT INTO authtokens (user_id, token, expires_at) VALUES (@uid, @token, @exp)", conn);
            insertTokenCmd.Parameters.AddWithValue("@uid", userId);
            insertTokenCmd.Parameters.AddWithValue("@token", token);
            insertTokenCmd.Parameters.AddWithValue("@exp", expires);
            await insertTokenCmd.ExecuteNonQueryAsync();

            // Сохраняем токен в localStorage (через JS позже)
            await JS.InvokeVoidAsync("localStorage.setItem", "auth_token", token);

            debug = "✅ Регистрация завершена";
            isRegistering = false;
            Navigation.NavigateTo("/main");
        }
        catch (Exception ex)
        {
            debug = $"❌ Ошибка: {ex.Message}";
        }

        isRegistering = false;
    }

}


@if (!isRegistering)
{

    <div class="login-container">
        <h2>Увядай, если не знаешь</h2>
        <input @bind="login" placeholder="Логин" />
        <input @bind="password" type="password" placeholder="Пароль" />
        <div class="button-container">
            <button @onclick="SubmitLogin">Войти</button>
            <button @onclick="StartRegistration">Регистрация</button>
        </div>
    </div>
    <div class="background-image-container">
        <img src="images/background/menu.png" class="background-image" />
    </div>
}
else
{
    <pre style="color:red">@debug</pre>

    <div class="modal-overlay"></div>

    <div class="modal show">
        <button class="close-btn" @onclick="() => isRegistering = false">×</button>

        <h3 class="modal-title">Регистрация</h3>

        <div class="modal-form">
            <input @bind="regUsername" placeholder="Имя пользователя" />
            <input @bind="regEmail" placeholder="Email" />
            <input @bind="regPassword" type="password" placeholder="Пароль" />

            <div class="button-container">
                <button class="primary-btn" @onclick="SubmitRegistration">Зарегистрироваться</button>
                <button class="back-btn" @onclick="() => isRegistering = false">Назад</button>
            </div>
        </div>
    </div>
}